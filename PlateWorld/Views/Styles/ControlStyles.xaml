<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!--<Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="0" StrokeDashArray="1 2" 
                                   Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" 
                                   SnapsToDevicePixels="true" StrokeThickness="0"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->
    
    <SolidColorBrush x:Key="Item.MouseOver.Background" Color="#1F26A0DA"/>
    <!--<SolidColorBrush x:Key="Item.MouseOver.Border" Color="#a826A0Da"/>-->

    <SolidColorBrush x:Key="Item.MouseOver.Border" Color="White"/>
    <!--<SolidColorBrush x:Key="Item.SelectedActive.Background" Color="#3D26A0DA"/>
    <SolidColorBrush x:Key="Item.SelectedActive.Border" Color="#FF26A0DA"/>-->
    <!--<SolidColorBrush x:Key="Item.SelectedActive.Background" Color="Red"/>
    <SolidColorBrush x:Key="Item.SelectedActive.Border" Color="Orange"/>-->
    <SolidColorBrush x:Key="Item.SelectedActive.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="Item.SelectedActive.Border" Color="Transparent"/>
    <!--<SolidColorBrush x:Key="Item.SelectedInactive.Background" Color="#3DDADADA"/>
    <SolidColorBrush x:Key="Item.SelectedInactive.Border" Color="#FFDADADA"/>-->
    <SolidColorBrush x:Key="Item.SelectedInactive.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="Item.SelectedInactive.Border" Color="Transparent"/>



    <Style x:Key="WellItemContainerStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="IsSelected" Value="{Binding IsSelected}" />
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="HorizontalContentAlignment" 
                Value="{Binding HorizontalContentAlignment, 
                       RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" 
                Value="{Binding VerticalContentAlignment, 
                       RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd" Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Padding="{TemplateBinding Padding}" 
                            SnapsToDevicePixels="true">
                        <ContentPresenter 
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.MouseOver.Border}"/>
                        </MultiTrigger>
                        
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <Style x:Key="BlockItemContainerStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="IsSelected" Value="{Binding IsSelected}" />
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="HorizontalContentAlignment" 
                Value="{Binding HorizontalContentAlignment, 
                       RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" 
                Value="{Binding VerticalContentAlignment, 
                       RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd" Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Padding="{TemplateBinding Padding}" 
                            SnapsToDevicePixels="true">
                        <ContentPresenter 
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.MouseOver.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" 
                                    TargetName="Bd" 
                                    Value="{StaticResource Item.SelectedInactive.Background}"/>
                            <Setter Property="BorderBrush" 
                                    TargetName="Bd" 
                                    Value="{StaticResource Item.SelectedInactive.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" 
                                    TargetName="Bd" 
                                    Value="{StaticResource Item.SelectedActive.Background}"/>
                            <Setter Property="BorderBrush" 
                                    TargetName="Bd" 
                                    Value="{StaticResource Item.SelectedActive.Border}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" 
                                    TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="HeaderedContentControl">
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="HeaderedContentControl">
                    <DockPanel LastChildFill="False">
                        <ContentPresenter ContentSource="Header" DockPanel.Dock="Left" Focusable="False" VerticalAlignment="Center"/>
                        <ContentPresenter ContentSource="Content" Margin="5,0,0,0" DockPanel.Dock="Right" VerticalAlignment="Center"/>
                    </DockPanel>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="TextBox" x:Key="MediumTextBox">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Margin" Value="10,5"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Width" Value="150"/>
    </Style>
    
    
    <Style TargetType="TextBlock" x:Key="LargeTextBlock">
        <Setter Property="Margin" Value="0,5,0,5"/>
        <Setter Property="FontSize" Value="22"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
    </Style>

    <Style TargetType="TextBlock" x:Key="MediumTextBlock">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Margin" Value="10,5"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>

    <Style TargetType="TextBlock" x:Key="SmallTextBlock">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Margin" Value="10,0"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Width" Value="100"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
    </Style>
    
    <Style TargetType="TextBlock" x:Key="ErrorTextBlock">
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Foreground" Value="#FA00"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="TextAlignment" Value="Center"/>
    </Style>


    <Style TargetType="Button" x:Key="NavButton">
        <Setter Property="Padding" Value="10,5"/>
        <Setter Property="Margin" Value="10 5"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="MinWidth" Value="100"/>
        <Setter Property="Background" Value="MediumAquamarine" />
        <Setter Property="Foreground" Value="MediumBlue" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate  TargetType="{x:Type Button}" >
                    <Border CornerRadius="2"  BorderThickness="1"  
                            Height="28" Margin="0,0,10,0" x:Name="ButtonBorder">
                        <ContentPresenter Margin="2" VerticalAlignment="Center"  HorizontalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="ButtonBorder" Value="#eee"/>
                            <Setter Property="BorderBrush" TargetName="ButtonBorder" Value="Gray"/>
                            <Setter Property="Cursor" TargetName="ButtonBorder" Value="No"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter Property="Background" TargetName="ButtonBorder" Value="#5e95a7"/>
                            <Setter Property="BorderBrush" TargetName="ButtonBorder" Value="Blue"/>
                            <Setter Property="Cursor" TargetName="ButtonBorder" Value="Hand"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Button" x:Key="LocalButton">
        <Setter Property="Padding" Value="10,5"/>
        <Setter Property="Margin" Value="10 5"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="Background" Value="#60F0" />
        <Setter Property="Foreground" Value="MediumBlue" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate  TargetType="{x:Type Button}" >
                    <Border CornerRadius="0"  BorderThickness="2"  
                            Height="21" Margin="0" x:Name="ButtonBorder">
                        <ContentPresenter VerticalAlignment="Center"  HorizontalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="ButtonBorder" Value="#eee"/>
                            <Setter Property="BorderBrush" TargetName="ButtonBorder" Value="Gray"/>
                            <Setter Property="Cursor" TargetName="ButtonBorder" Value="No"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter Property="Background" TargetName="ButtonBorder" Value="#5Ba"/>
                            <Setter Property="BorderBrush" TargetName="ButtonBorder" Value="#80F0"/>
                            <Setter Property="Cursor" TargetName="ButtonBorder" Value="Hand"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Button" x:Key="MenuButton">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <TextBlock Text="{TemplateBinding Content}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <TextBlock Text="{TemplateBinding Content}" TextDecorations="Underline" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#888"/>
            </Trigger>

        </Style.Triggers>
    </Style>


</ResourceDictionary>